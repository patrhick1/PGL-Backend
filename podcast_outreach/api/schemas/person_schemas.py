# podcast_outreach/api/schemas/person_schemas.py

import uuid
from pydantic import BaseModel, Field
from typing import List, Optional, Dict
from datetime import datetime

class PersonBase(BaseModel):
    company_id: Optional[int] = None # Foreign key to COMPANIES table
    full_name: Optional[str] = None
    email: Optional[str] = None # Email is not always required (e.g., for hosts)
    linkedin_profile_url: Optional[str] = None
    twitter_profile_url: Optional[str] = None
    instagram_profile_url: Optional[str] = None
    tiktok_profile_url: Optional[str] = None
    profile_image_url: Optional[str] = None # Profile image URL from S3
    dashboard_username: Optional[str] = None
    # dashboard_password_hash: Optional[str] = None # Typically not exposed or updated directly via general API
    attio_contact_id: Optional[uuid.UUID] = None
    role: Optional[str] = None
    notification_settings: Optional[Dict[str, bool]] = None

class PersonCreate(PersonBase):
    notification_settings: Optional[Dict[str, bool]] = None

class PersonUpdate(BaseModel):
    company_id: Optional[int] = None
    full_name: Optional[str] = None
    email: Optional[str] = None # Allow email update, though uniqueness must be handled
    linkedin_profile_url: Optional[str] = None
    twitter_profile_url: Optional[str] = None
    instagram_profile_url: Optional[str] = None
    tiktok_profile_url: Optional[str] = None
    dashboard_username: Optional[str] = None
    attio_contact_id: Optional[uuid.UUID] = None
    role: Optional[str] = None
    notification_settings: Optional[Dict[str, bool]] = None

class PersonInDB(PersonBase):
    person_id: int # Auto-generated by SERIAL
    created_at: datetime
    updated_at: datetime
    dashboard_password_hash: Optional[str] = None # Include for reading, but not direct update via PersonUpdate
    notification_settings: Optional[Dict[str, bool]] = None

    class Config:
        from_attributes = True

class UserProfileUpdate(BaseModel): # Specific schema for user updating their own profile
    full_name: Optional[str] = None
    # email: Optional[str] = None # Email changes often require verification, handle with care or disallow self-service
    linkedin_profile_url: Optional[str] = None
    twitter_profile_url: Optional[str] = None
    instagram_profile_url: Optional[str] = None
    tiktok_profile_url: Optional[str] = None
    dashboard_username: Optional[str] = None # Users might want to change their username
    # Add other fields from PersonBase that a user can update themselves
    # e.g., bio from your frontend form, website, location, timezone
    bio: Optional[str] = None
    website: Optional[str] = None # Assuming 'website' is a field in your 'people' table
    location: Optional[str] = None # Assuming 'location' is a field in your 'people' table
    timezone: Optional[str] = None # Assuming 'timezone' is a field in your 'people' table
    notification_settings: Optional[Dict[str, bool]] = None

class PersonSetPassword(BaseModel):
    password: str = Field(min_length=8, description="New password for the person (min 8 characters)")

class Person(PersonBase):
    id: int

    class Config:
        orm_mode = True