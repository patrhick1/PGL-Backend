# podcast_outreach/api/schemas/person_schemas.py

import uuid
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class PersonBase(BaseModel):
    company_id: Optional[int] = None # Foreign key to COMPANIES table
    full_name: Optional[str] = None
    email: str # Email is required and should be unique
    linkedin_profile_url: Optional[str] = None
    twitter_profile_url: Optional[str] = None
    instagram_profile_url: Optional[str] = None
    tiktok_profile_url: Optional[str] = None
    dashboard_username: Optional[str] = None
    # dashboard_password_hash: Optional[str] = None # Typically not exposed or updated directly via general API
    attio_contact_id: Optional[uuid.UUID] = None
    role: Optional[str] = None

class PersonCreate(PersonBase):
    pass

class PersonUpdate(BaseModel):
    company_id: Optional[int] = None
    full_name: Optional[str] = None
    email: Optional[str] = None # Allow email update, though uniqueness must be handled
    linkedin_profile_url: Optional[str] = None
    twitter_profile_url: Optional[str] = None
    instagram_profile_url: Optional[str] = None
    tiktok_profile_url: Optional[str] = None
    dashboard_username: Optional[str] = None
    attio_contact_id: Optional[uuid.UUID] = None
    role: Optional[str] = None

class PersonInDB(PersonBase):
    person_id: int # Auto-generated by SERIAL
    created_at: datetime
    updated_at: datetime
    dashboard_password_hash: Optional[str] = None # Include for reading, but not direct update via PersonUpdate

    class Config:
        from_attributes = True

class PersonSetPassword(BaseModel):
    password: str = Field(min_length=8, description="New password for the person (min 8 characters)")

class Person(PersonBase):
    id: int

    class Config:
        orm_mode = True